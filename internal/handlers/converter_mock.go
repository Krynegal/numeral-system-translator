// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handlers

import (
	"sync"
)

// Ensure, that ConverterMock does implement Converter.
// If this is not the case, regenerate this file with moq.
var _ Converter = &ConverterMock{}

// ConverterMock is a mock implementation of Converter.
//
//	func TestSomethingThatUsesConverter(t *testing.T) {
//
//		// make and configure a mocked Converter
//		mockedConverter := &ConverterMock{
//			ConvertFunc: func(num string, base int, toBase int) (string, error) {
//				panic("mock out the Convert method")
//			},
//		}
//
//		// use mockedConverter in code that requires Converter
//		// and then make assertions.
//
//	}
type ConverterMock struct {
	// ConvertFunc mocks the Convert method.
	ConvertFunc func(num string, base int, toBase int) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Convert holds details about calls to the Convert method.
		Convert []struct {
			// Num is the num argument value.
			Num string
			// Base is the base argument value.
			Base int
			// ToBase is the toBase argument value.
			ToBase int
		}
	}
	lockConvert sync.RWMutex
}

// Convert calls ConvertFunc.
func (mock *ConverterMock) Convert(num string, base int, toBase int) (string, error) {
	if mock.ConvertFunc == nil {
		panic("ConverterMock.ConvertFunc: method is nil but Converter.Convert was just called")
	}
	callInfo := struct {
		Num    string
		Base   int
		ToBase int
	}{
		Num:    num,
		Base:   base,
		ToBase: toBase,
	}
	mock.lockConvert.Lock()
	mock.calls.Convert = append(mock.calls.Convert, callInfo)
	mock.lockConvert.Unlock()
	return mock.ConvertFunc(num, base, toBase)
}

// ConvertCalls gets all the calls that were made to Convert.
// Check the length with:
//
//	len(mockedConverter.ConvertCalls())
func (mock *ConverterMock) ConvertCalls() []struct {
	Num    string
	Base   int
	ToBase int
} {
	var calls []struct {
		Num    string
		Base   int
		ToBase int
	}
	mock.lockConvert.RLock()
	calls = mock.calls.Convert
	mock.lockConvert.RUnlock()
	return calls
}
